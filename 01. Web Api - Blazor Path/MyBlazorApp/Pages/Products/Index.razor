@page "/products"

@using MyFirstApi.Client
@inject ProductsClient ProductsClient
@inject IJSRuntime JS

<h1>Products</h1>

<NavLink class="btn btn-primary mb-2" href="/products/create">
    New Product
</NavLink>

@if (products.Count == 0)
{
    <p>Cargando productos...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Category</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.CategoryName</td>
                    <td>@product.Price.ToString("c")</td>
                    <td>
                        <NavLink class="btn btn-sm btn-light" href="@($"/products/edit/{product.ProductId}")">
                            <span class="oi oi-pencil"></span>
                        </NavLink>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="@(e => DeleteProduct(product))">
                            <span class="oi oi-x"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private ICollection<ProductModel> products = new List<ProductModel>();

    protected override async Task OnInitializedAsync()
    {
        products = await ProductsClient.GetProductsAsync();
    }

    private async Task DeleteProduct(ProductModel model)
    {
        var result = await JS.InvokeAsync<bool>("confirm", $"Are you sure to delete {model.Name}?");

        if (result)
        {
            await ProductsClient.DeleteProductAsync(model.ProductId);

            products.Remove(model);
        }
    }
}